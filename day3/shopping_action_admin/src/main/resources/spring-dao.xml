<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!--先创建数据库的基本信息-->
    <!--加载dataSource.properties-->
   <mvc:property-placeholder location="classpath:dataSource.properties"></mvc:property-placeholder>

   <!--通过连接池解析配置文件-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

        <!--  =====连接池的私有属性======= -->
        <!--初始化最大的连接数量-->
        <property name="initialSize" value="${jdbc.initialSize}"></property>
        <!--最小的空闲数量-->
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!--最大的活跃的数量-->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!--最长的等待时间-->
        <property name="maxWait" value="${jdbc.maxWait}" />


        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，相当于C3P0的idleConnectionTestPeriod 参数，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"    value="${jdbc.minEvictableIdleTimeMillis}" />
        <!-- 测试连接，单位为毫秒 -->
        <property name="validationQueryTimeout" value="300000" />
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="testWhileIdle"   value="true" />
        <property name="testOnBorrow"    value="false" />
        <property name="testOnReturn"    value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50" />




    </bean>


    <!--配置mybatis执行sql语句-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--连接数据库-->
        <property name="dataSource" ref="dataSource"></property>
        <!--面向接口编程:接口、映射文件、实体类-->
        <property name="mapperLocations" value="classpath:com/jxzt/shopping/mapper/*.xml"></property>
        <!--加载实体类-->
        <property name="typeAliasesPackage" value="com.jxzt.shopping.bean"></property>
        <!--配置分页插件PageHelper  针对List-->
        <!--1.配置一个插件-->
        <property name="plugins">
            <!--2.分页数据正在集中-->
            <list>
                <!--3.PageHelper来装载list集合-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!--解析对象中的属性-->
<property name="properties">
    <!--5.属性对应是那个数据库中的数据-->
    <props>
<prop key="helperDialect">mysql</prop>
    </props>
</property>
                </bean>
            </list>
        </property>

    </bean>
        <!--将配置文件mybatis配置文件输入到Spring核心容器中-->
        <bean id="configurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.jxzt.shopping.dao"></property>
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        </bean>
</beans>